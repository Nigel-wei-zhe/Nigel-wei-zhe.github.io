<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nigel Blog</title>
    <link>https://Nigel-wei-zhe.github.io/</link>
    <description>Recent content on Nigel Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sun, 20 Oct 2019 17:02:14 +0800</lastBuildDate>
    
	<atom:link href="https://Nigel-wei-zhe.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript Abbreviation</title>
      <link>https://Nigel-wei-zhe.github.io/post/javascript-abbreviation/</link>
      <pubDate>Sun, 20 Oct 2019 17:02:14 +0800</pubDate>
      
      <guid>https://Nigel-wei-zhe.github.io/post/javascript-abbreviation/</guid>
      <description>三元運算子  當要寫 if else 判斷式時 一般會寫成
const a = 7 let result if (a &amp;gt; 0) { result = `a大於0` } else { result = `a小於0` }  簡寫
let result = a &amp;gt; 0 ? `a大於0` : `a小於0`   短路求值  當宣告一個變數給值時，想確認不是 null, undefined, 空值時 可能會這樣寫
if (a !== null || a !== undefined || a !== &#39;&#39;) { let b = a }  簡寫</description>
    </item>
    
    <item>
      <title>Build Express</title>
      <link>https://Nigel-wei-zhe.github.io/post/express%E5%BB%BA%E7%BD%AE/</link>
      <pubDate>Wed, 16 Oct 2019 14:12:25 +0800</pubDate>
      
      <guid>https://Nigel-wei-zhe.github.io/post/express%E5%BB%BA%E7%BD%AE/</guid>
      <description>#介紹 express是建立在node.js的http模組上，另外包裝，並提供 一些中介。
不免俗 Hello world 範例:
const express = require(&#39;express&#39;) const app = express() app.get(`/`, function (req, res) { res.send(`Hello World!`) }) app.listen(3000, function () { console.log(`Example app listening on port 3000!`) })  或者 可以直接用產生器
全域安裝
npm install express-generator -g  裝完透過
express -h  可以看到
Usage: express [options][dir] Options: -h, --help output usage information --version output the version number -e, --ejs add ejs engine support --hbs add handlebars engine support --pug add pug engine support -H, --hogan add hogan.</description>
    </item>
    
    <item>
      <title>V-if 注意資料載入的時間點</title>
      <link>https://Nigel-wei-zhe.github.io/post/v-if-%E6%B3%A8%E6%84%8F%E8%B3%87%E6%96%99%E8%BC%89%E5%85%A5%E7%9A%84%E6%99%82%E9%96%93%E9%BB%9E/</link>
      <pubDate>Mon, 14 Oct 2019 16:28:40 +0800</pubDate>
      
      <guid>https://Nigel-wei-zhe.github.io/post/v-if-%E6%B3%A8%E6%84%8F%E8%B3%87%E6%96%99%E8%BC%89%E5%85%A5%E7%9A%84%E6%99%82%E9%96%93%E9%BB%9E/</guid>
      <description>#狀況 Html:
&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; &amp;lt;h1 v-if=&amp;quot;testData.array.length &amp;gt; 0&amp;quot;&amp;gt; 如果陣列有值顯示出來 &amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt;  Js:
new Vue ({ el: &#39;#app&#39;, data: { testData: &#39;&#39; }, created () { const vm = this vm.testData = { testArray: [ { msg: &#39;hi&#39; } ] } } })  這時候去看console 會報錯
TypeError: Cannot read property &#39;length&#39; of undefined  就我的理解應該是一開始掛載 data 時，屬性建立時還沒有把 testArray 掛上去，當然也無法使用length
#解決辦法 &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; &amp;lt;h1 v-if=&amp;quot;testData.testArray &amp;amp;&amp;amp; testData.testArray.length &amp;gt; 0&amp;quot;&amp;gt; 如果陣列有值顯示出來 &amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt;  一開始就先檢查一次值是否存在，再執行後續動作</description>
    </item>
    
    <item>
      <title>Regular Expression</title>
      <link>https://Nigel-wei-zhe.github.io/post/regular-expression/</link>
      <pubDate>Tue, 08 Oct 2019 15:22:42 +0800</pubDate>
      
      <guid>https://Nigel-wei-zhe.github.io/post/regular-expression/</guid>
      <description>介紹 Regular Expression (RegExp) 正規表達式 用來判斷字串是否有符合格式 線上測試Reg格式的網址:https://regexr.com/
RegExp宣告 以下用js示範 直接例項化:
var reg = new RegExp(pattern [, flags])  隱式建立:
var reg = /pattern/flags  pattern 是一個字串，填入正規表示式 flags 是一個可選的字串，包含屬性 &amp;lsquo;g&amp;rsquo;（global ）、&amp;rsquo;i&amp;rsquo; （ignoreCase）和 &amp;rsquo;m&amp;rsquo;（multiline）
RegExp 物件方法 test: 檢索字串中是否存在指定的值。返回值是 true 或 false
var reg = new RegExp(&#39;a&#39;) console.log(reg.test(&#39;abc&#39;)) OUTPUT: true  exec: 檢索字串中的指定值。返回值是被找到的值。如果沒有發現匹配，則返回 null
var reg = new RegExp(&#39;a&#39;) console.log(reg.exec(&#39;abc&#39;)) OUTPUT: a  replace: 替換與正規表示式匹配的子串
var str = &#39;hi&#39; console.log(str.replace(/hi/, &#39;yo&#39;)); OUTPUT: yo  範例    RegExp 說明 範例     /^09\d{8}$/ 手機號碼 &amp;ldquo;0912345678&amp;rdquo;   /^.</description>
    </item>
    
    <item>
      <title>使用github.io佈署自己的website&#34;</title>
      <link>https://Nigel-wei-zhe.github.io/post/%E4%BD%BF%E7%94%A8github.io%E4%BD%88%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84website/</link>
      <pubDate>Sat, 05 Oct 2019 17:28:06 +0800</pubDate>
      
      <guid>https://Nigel-wei-zhe.github.io/post/%E4%BD%BF%E7%94%A8github.io%E4%BD%88%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84website/</guid>
      <description>Github有提供可以呈現靜態檔案的伺服器 只有靜態檔案，所以動態網頁是無法呈現的
使用方法如下:
1.Create a repository
前往 github 創一個新的 repository 名稱必須和使用者一樣 ( 使用者名稱/使用者名稱.github.io ) 舉例: Nigel-wei-zhe/Nigel-wei-zhe.github.io
!!! 要設定為 Public !!!
2.在本地端建立資料夾
創好 repository 後 可以選擇在本地端clone一個資料夾或者自己創一個透過git指令上傳 這邊示範自己建資料夾git上傳
首先在桌面創建一個資料夾 page 並在資料夾裡隨意新增一個 index.html 隨便寫點內容
index.html:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;I&#39;m hosted with GitHub Pages.&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  存檔
接著透過上方路徑列開啟cmd
C:\Users\Nigel\Desktop\page&amp;gt;  開始添加git指令:
echo &amp;quot;# my first page&amp;quot; &amp;gt;&amp;gt; README.md git init git add . git commit -m &amp;quot;first commit&amp;quot; git remote add origin https://github.</description>
    </item>
    
    <item>
      <title>Vue_Filter過濾器</title>
      <link>https://Nigel-wei-zhe.github.io/post/vue_filter%E9%81%8E%E6%BF%BE%E5%99%A8/</link>
      <pubDate>Fri, 04 Oct 2019 19:50:39 +0800</pubDate>
      
      <guid>https://Nigel-wei-zhe.github.io/post/vue_filter%E9%81%8E%E6%BF%BE%E5%99%A8/</guid>
      <description>用於處理一些頁面上資料的呈現
用法: 值後面加上 | (pipe) 可以串入多個Filter，有順序之分(左至右)
{{ value | A | B | C }} A 執行完 會B 再換 C  範例:
替金額加上$，和千分位符號 程式碼如下
&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; &amp;lt;div&amp;gt;{{ price | currency }}&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; new Vue({ el: &#39;#app&#39;, data: { price: 999999 } filter: { currency (number) { const n = Number(number) return `$${n.toFixed(0).replace(/./g, (c, i, a) =&amp;gt; { const currency = (i &amp;amp;&amp;amp; c !== &#39;.&#39; &amp;amp;&amp;amp; ((a.length - i) % 3 === 0) ?</description>
    </item>
    
    <item>
      <title>使用Hugo</title>
      <link>https://Nigel-wei-zhe.github.io/post/%E4%BD%BF%E7%94%A8hugo/</link>
      <pubDate>Thu, 03 Oct 2019 20:09:38 +0800</pubDate>
      
      <guid>https://Nigel-wei-zhe.github.io/post/%E4%BD%BF%E7%94%A8hugo/</guid>
      <description>建置環境:Windows-64bit
安裝Hugo 前往: https://github.com/gohugoio/hugo/releases
下載對應的版本
在 C:\ 底下建立 一個新資料夾 命名 Hugo 裡面再建立一個子資料夾 命名 bin
把剛剛下載的檔案 全部解壓縮 放入 C:\Hugo\bin
使用 CMD 下指令 確認版本號
C:\Hugo\bin&amp;gt;hugo version  再去 控制台 -&amp;gt; 編輯系統環境變數
環境變數 -&amp;gt; 使用者變數的 Path 把剛剛的
C:\Hugo\bin  新增進去
使用 CMD 去確認 有新增成功
C:\&amp;gt;hugo version  有跳出版本訊息 才算成功
新增一個新的 Site 指令
hugo new site [Site名稱]  線上選取一個主題: https://themes.gohugo.io/
選取主題後，底下作者都有教怎麼安裝 請參考
新增第一篇文章試試看
指令
hugo new posts/my-first-post.md  會在 \content\posts 找到我們新增的第一篇文章
這時候下指令
hugo server -D  就會在 http://localhost:1313/ 看到成果</description>
    </item>
    
  </channel>
</rss>